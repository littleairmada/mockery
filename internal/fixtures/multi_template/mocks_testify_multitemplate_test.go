// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// TEST MOCKERY BOILERPLATE

package multitemplate

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTestifyFoo creates a new instance of MockTestifyFoo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTestifyFoo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTestifyFoo {
	mock := &MockTestifyFoo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTestifyFoo is an autogenerated mock type for the Foo type
type MockTestifyFoo struct {
	mock.Mock
}

type MockTestifyFoo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTestifyFoo) EXPECT() *MockTestifyFoo_Expecter {
	return &MockTestifyFoo_Expecter{mock: &_m.Mock}
}

// Bar provides a mock function for the type MockTestifyFoo
func (_mock *MockTestifyFoo) Bar() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bar")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTestifyFoo_Bar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bar'
type MockTestifyFoo_Bar_Call struct {
	*mock.Call
}

// Bar is a helper method to define mock.On call
func (_e *MockTestifyFoo_Expecter) Bar() *MockTestifyFoo_Bar_Call {
	return &MockTestifyFoo_Bar_Call{Call: _e.mock.On("Bar")}
}

func (_c *MockTestifyFoo_Bar_Call) Run(run func()) *MockTestifyFoo_Bar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTestifyFoo_Bar_Call) Return(s string) *MockTestifyFoo_Bar_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTestifyFoo_Bar_Call) RunAndReturn(run func() string) *MockTestifyFoo_Bar_Call {
	_c.Call.Return(run)
	return _c
}
