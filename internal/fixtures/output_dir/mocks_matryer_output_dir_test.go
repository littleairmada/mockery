// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer
// TEST MOCKERY BOILERPLATE

package output_dir

import (
	"sync"
)

// Ensure that MoqOutputDirWithinSrcPkg does implement OutputDirWithinSrcPkg.
// If this is not the case, regenerate this file with mockery.
var _ OutputDirWithinSrcPkg = &MoqOutputDirWithinSrcPkg{}

// MoqOutputDirWithinSrcPkg is a mock implementation of OutputDirWithinSrcPkg.
//
//	func TestSomethingThatUsesOutputDirWithinSrcPkg(t *testing.T) {
//
//		// make and configure a mocked OutputDirWithinSrcPkg
//		mockedOutputDirWithinSrcPkg := &MoqOutputDirWithinSrcPkg{
//			BazFunc: func() string {
//				panic("mock out the Baz method")
//			},
//		}
//
//		// use mockedOutputDirWithinSrcPkg in code that requires OutputDirWithinSrcPkg
//		// and then make assertions.
//
//	}
type MoqOutputDirWithinSrcPkg struct {
	// BazFunc mocks the Baz method.
	BazFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Baz holds details about calls to the Baz method.
		Baz []struct {
		}
	}
	lockBaz sync.RWMutex
}

// Baz calls BazFunc.
func (mock *MoqOutputDirWithinSrcPkg) Baz() string {
	callInfo := struct {
	}{}
	mock.lockBaz.Lock()
	mock.calls.Baz = append(mock.calls.Baz, callInfo)
	mock.lockBaz.Unlock()
	if mock.BazFunc == nil {
		var (
			s string
		)
		return s
	}
	return mock.BazFunc()
}

// BazCalls gets all the calls that were made to Baz.
// Check the length with:
//
//	len(mockedOutputDirWithinSrcPkg.BazCalls())
func (mock *MoqOutputDirWithinSrcPkg) BazCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBaz.RLock()
	calls = mock.calls.Baz
	mock.lockBaz.RUnlock()
	return calls
}

// ResetBazCalls reset all the calls that were made to Baz.
func (mock *MoqOutputDirWithinSrcPkg) ResetBazCalls() {
	mock.lockBaz.Lock()
	mock.calls.Baz = nil
	mock.lockBaz.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *MoqOutputDirWithinSrcPkg) ResetCalls() {
	mock.lockBaz.Lock()
	mock.calls.Baz = nil
	mock.lockBaz.Unlock()
}
