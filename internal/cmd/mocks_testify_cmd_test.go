// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// TEST MOCKERY BOILERPLATE

package cmd

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockargGetter creates a new instance of MockargGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockargGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockargGetter {
	mock := &MockargGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockargGetter is an autogenerated mock type for the argGetter type
type MockargGetter struct {
	mock.Mock
}

type MockargGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockargGetter) EXPECT() *MockargGetter_Expecter {
	return &MockargGetter_Expecter{mock: &_m.Mock}
}

// GetString provides a mock function for the type MockargGetter
func (_mock *MockargGetter) GetString(name string) (string, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockargGetter_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockargGetter_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - name
func (_e *MockargGetter_Expecter) GetString(name interface{}) *MockargGetter_GetString_Call {
	return &MockargGetter_GetString_Call{Call: _e.mock.On("GetString", name)}
}

func (_c *MockargGetter_GetString_Call) Run(run func(name string)) *MockargGetter_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockargGetter_GetString_Call) Return(s string, err error) *MockargGetter_GetString_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockargGetter_GetString_Call) RunAndReturn(run func(name string) (string, error)) *MockargGetter_GetString_Call {
	_c.Call.Return(run)
	return _c
}
